
// 기본 단가 설정 (localStorage에서 불러오거나 기본값 사용)
let pricing = {
    demolition: 50000,    // 철거 (평당)
    carpentry: 80000,     // 목공 (평당)
    electrical: 60000,    // 전기공사 (평당)
    wallpaper: 120000,    // 도배 (개당)
    window: 250000,       // 샷시 (개당)
    lighting: 45000,      // 조명 (개당)
    molding: 8000,        // 몰딩 (미터당)
    flooring: 70000,      // 바닥재 (평당)
    door: 180000,         // 문교체 (개당)
    bathroom: 800000,     // 욕실 (개당)
    aircon: 350000,       // 에어컨 (개당)
    facility: 150000,     // 설비 (개당)
    island: 200000,       // 섬 공사 (일당)
    labor: 100000         // 기본 인건비 (일당)
};

// 관리자 비밀번호 (localStorage에서 불러오거나 기본값 사용)
let adminPassword = localStorage.getItem('adminPassword') || '1234';

// 페이지 로드 시 초기화
document.addEventListener('DOMContentLoaded', function() {
    loadPricing();
    loadAdminPricing();
    setupEventListeners();
    calculateEstimate();
});

// 저장된 단가 불러오기
function loadPricing() {
    const savedPricing = localStorage.getItem('interiorPricing');
    if (savedPricing) {
        pricing = JSON.parse(savedPricing);
    }
}

// 관리자 패널에 현재 단가 로드
function loadAdminPricing() {
    document.getElementById('admin-demolition').value = pricing.demolition;
    document.getElementById('admin-carpentry').value = pricing.carpentry;
    document.getElementById('admin-electrical').value = pricing.electrical;
    document.getElementById('admin-wallpaper').value = pricing.wallpaper;
    document.getElementById('admin-window').value = pricing.window;
    document.getElementById('admin-lighting').value = pricing.lighting;
    document.getElementById('admin-molding').value = pricing.molding;
    document.getElementById('admin-flooring').value = pricing.flooring;
    document.getElementById('admin-door').value = pricing.door;
    document.getElementById('admin-bathroom').value = pricing.bathroom;
    document.getElementById('admin-aircon').value = pricing.aircon;
    document.getElementById('admin-facility').value = pricing.facility;
    document.getElementById('admin-island').value = pricing.island;
    document.getElementById('admin-labor').value = pricing.labor;
}

// 이벤트 리스너 설정
function setupEventListeners() {
    // 입력 필드 변경 시 실시간 계산
    const inputs = document.querySelectorAll('.form-input');
    inputs.forEach(input => {
        input.addEventListener('input', calculateEstimate);
    });

    // 체크박스 이벤트
    document.getElementById('islandWork').addEventListener('change', function() {
        const islandDaysInput = document.getElementById('islandDays');
        islandDaysInput.disabled = !this.checked;
        if (!this.checked) {
            islandDaysInput.value = 0;
        }
        calculateEstimate();
    });

    document.getElementById('includeLaborCost').addEventListener('change', calculateEstimate);

    // 관리자 모드 버튼
    document.getElementById('adminBtn').addEventListener('click', openAdminPanel);
    document.getElementById('closeAdminBtn').addEventListener('click', closeAdminPanel);
    document.getElementById('saveBtn').addEventListener('click', savePricing);
    document.getElementById('changePasswordBtn').addEventListener('click', changePassword);

    // 액션 버튼들
    document.getElementById('copyBtn').addEventListener('click', copyEstimate);
    document.getElementById('printBtn').addEventListener('click', printEstimate);
}

// 견적 계산 함수
function calculateEstimate() {
    const workDays = parseFloat(document.getElementById('workDays').value) || 0;
    
    // 각 항목별 수량 가져오기
    const quantities = {
        demolition: parseFloat(document.getElementById('demolition').value) || 0,
        carpentry: parseFloat(document.getElementById('carpentry').value) || 0,
        electrical: parseFloat(document.getElementById('electrical').value) || 0,
        wallpaper: parseFloat(document.getElementById('wallpaper').value) || 0,
        window: parseFloat(document.getElementById('window').value) || 0,
        lighting: parseFloat(document.getElementById('lighting').value) || 0,
        molding: parseFloat(document.getElementById('molding').value) || 0,
        flooring: parseFloat(document.getElementById('flooring').value) || 0,
        door: parseFloat(document.getElementById('door').value) || 0,
        bathroom: parseFloat(document.getElementById('bathroom').value) || 0,
        aircon: parseFloat(document.getElementById('aircon').value) || 0,
        facility: parseFloat(document.getElementById('facility').value) || 0,
        islandDays: document.getElementById('islandWork').checked ? (parseFloat(document.getElementById('islandDays').value) || 0) : 0,
        includeLaborCost: document.getElementById('includeLaborCost').checked
    };

    // 테이블 업데이트
    updateEstimateTable(quantities, workDays);
}

// 견적 테이블 업데이트
function updateEstimateTable(quantities, workDays) {
    const tableBody = document.getElementById('estimateTableBody');
    tableBody.innerHTML = '';
    
    let totalAmount = 0;
    
    // 항목별 계산 및 테이블 행 추가
    const items = [
        { name: '철거', key: 'demolition', unit: '평', price: pricing.demolition, quantity: quantities.demolition },
        { name: '목공', key: 'carpentry', unit: '평', price: pricing.carpentry, quantity: quantities.carpentry },
        { name: '전기공사', key: 'electrical', unit: '평', price: pricing.electrical, quantity: quantities.electrical },
        { name: '도배', key: 'wallpaper', unit: '개', price: pricing.wallpaper, quantity: quantities.wallpaper },
        { name: '샷시', key: 'window', unit: '개', price: pricing.window, quantity: quantities.window },
        { name: '조명', key: 'lighting', unit: '개', price: pricing.lighting, quantity: quantities.lighting },
        { name: '몰딩', key: 'molding', unit: 'm', price: pricing.molding, quantity: quantities.molding },
        { name: '바닥재', key: 'flooring', unit: '평', price: pricing.flooring, quantity: quantities.flooring },
        { name: '문교체', key: 'door', unit: '개', price: pricing.door, quantity: quantities.door },
        { name: '욕실', key: 'bathroom', unit: '개', price: pricing.bathroom, quantity: quantities.bathroom },
        { name: '에어컨', key: 'aircon', unit: '개', price: pricing.aircon, quantity: quantities.aircon },
        { name: '설비', key: 'facility', unit: '개', price: pricing.facility, quantity: quantities.facility }
    ];

    // 일반 항목들 추가
    items.forEach(item => {
        if (item.quantity > 0) {
            const amount = item.price * item.quantity;
            totalAmount += amount;
            addTableRow(item.name, formatCurrency(item.price), `${item.quantity} ${item.unit}`, formatCurrency(amount));
        }
    });

    // 섬 공사 추가
    if (quantities.islandDays > 0) {
        const islandAmount = pricing.island * quantities.islandDays;
        totalAmount += islandAmount;
        addTableRow('섬 공사', formatCurrency(pricing.island), `${quantities.islandDays} 일`, formatCurrency(islandAmount));
    }

    // 기본 인건비 추가
    if (quantities.includeLaborCost && workDays > 0) {
        const laborAmount = pricing.labor * workDays;
        totalAmount += laborAmount;
        addTableRow('기본 인건비', formatCurrency(pricing.labor), `${workDays} 일`, formatCurrency(laborAmount));
    }

    // 총합계 업데이트
    document.getElementById('totalAmount').innerHTML = `<strong>${formatCurrency(totalAmount)}</strong>`;
}

// 테이블 행 추가 함수
function addTableRow(name, price, quantity, amount) {
    const tableBody = document.getElementById('estimateTableBody');
    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${name}</td>
        <td>${price}</td>
        <td>${quantity}</td>
        <td>${amount}</td>
    `;
    tableBody.appendChild(row);
}

// 통화 포맷 함수
function formatCurrency(amount) {
    return new Intl.NumberFormat('ko-KR', {
        style: 'currency',
        currency: 'KRW',
        minimumFractionDigits: 0,
        maximumFractionDigits: 0
    }).format(amount);
}

// 관리자 패널 열기
function openAdminPanel() {
    const password = prompt('관리자 비밀번호를 입력하세요:');
    if (password === adminPassword) {
        document.getElementById('adminPanel').style.display = 'flex';
        loadAdminPricing();
    } else if (password !== null) {
        alert('비밀번호가 올바르지 않습니다.');
    }
}

// 관리자 패널 닫기
function closeAdminPanel() {
    document.getElementById('adminPanel').style.display = 'none';
}

// 단가 저장
function savePricing() {
    pricing.demolition = parseFloat(document.getElementById('admin-demolition').value) || 0;
    pricing.carpentry = parseFloat(document.getElementById('admin-carpentry').value) || 0;
    pricing.electrical = parseFloat(document.getElementById('admin-electrical').value) || 0;
    pricing.wallpaper = parseFloat(document.getElementById('admin-wallpaper').value) || 0;
    pricing.window = parseFloat(document.getElementById('admin-window').value) || 0;
    pricing.lighting = parseFloat(document.getElementById('admin-lighting').value) || 0;
    pricing.molding = parseFloat(document.getElementById('admin-molding').value) || 0;
    pricing.flooring = parseFloat(document.getElementById('admin-flooring').value) || 0;
    pricing.door = parseFloat(document.getElementById('admin-door').value) || 0;
    pricing.bathroom = parseFloat(document.getElementById('admin-bathroom').value) || 0;
    pricing.aircon = parseFloat(document.getElementById('admin-aircon').value) || 0;
    pricing.facility = parseFloat(document.getElementById('admin-facility').value) || 0;
    pricing.island = parseFloat(document.getElementById('admin-island').value) || 0;
    pricing.labor = parseFloat(document.getElementById('admin-labor').value) || 0;

    // localStorage에 저장
    localStorage.setItem('interiorPricing', JSON.stringify(pricing));
    
    alert('단가가 성공적으로 저장되었습니다.');
    calculateEstimate(); // 즉시 견적 재계산
}

// 비밀번호 변경
function changePassword() {
    const currentPassword = prompt('현재 비밀번호를 입력하세요:');
    if (currentPassword !== adminPassword) {
        alert('현재 비밀번호가 올바르지 않습니다.');
        return;
    }

    const newPassword = prompt('새 비밀번호를 입력하세요:');
    if (!newPassword) {
        alert('비밀번호가 입력되지 않았습니다.');
        return;
    }

    const confirmPassword = prompt('새 비밀번호를 다시 입력하세요:');
    if (newPassword !== confirmPassword) {
        alert('새 비밀번호가 일치하지 않습니다.');
        return;
    }

    adminPassword = newPassword;
    localStorage.setItem('adminPassword', adminPassword);
    alert('비밀번호가 성공적으로 변경되었습니다.');
}

// 견적서 복사
function copyEstimate() {
    const table = document.getElementById('estimateTable');
    const totalAmount = document.getElementById('totalAmount').textContent;
    
    let copyText = '인테리어 견적서\n\n';
    copyText += '항목\t단가\t수량\t금액\n';
    copyText += '─'.repeat(50) + '\n';
    
    const rows = table.querySelectorAll('tbody tr');
    rows.forEach(row => {
        const cells = row.querySelectorAll('td');
        copyText += `${cells[0].textContent}\t${cells[1].textContent}\t${cells[2].textContent}\t${cells[3].textContent}\n`;
    });
    
    copyText += '─'.repeat(50) + '\n';
    copyText += `총 합계: ${totalAmount}\n`;
    copyText += `\n견적 작성일: ${new Date().toLocaleDateString('ko-KR')}`;

    navigator.clipboard.writeText(copyText).then(() => {
        alert('견적서가 클립보드에 복사되었습니다.');
    }).catch(() => {
        alert('복사 중 오류가 발생했습니다.');
    });
}

// 인쇄
function printEstimate() {
    const printWindow = window.open('', '_blank');
    const table = document.getElementById('estimateTable').outerHTML;
    const totalAmount = document.getElementById('totalAmount').textContent;
    
    printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>인테리어 견적서</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                h1 { text-align: center; color: #333; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
                th { background-color: #f2f2f2; }
                .total-row { background-color: #e8f5e8; font-weight: bold; }
                .date { text-align: right; margin-top: 20px; }
            </style>
        </head>
        <body>
            <h1>🏠 인테리어 견적서</h1>
            ${table}
            <div class="date">견적 작성일: ${new Date().toLocaleDateString('ko-KR')}</div>
        </body>
        </html>
    `);
    
    printWindow.document.close();
    printWindow.print();
}

// 클릭 외부 영역 클릭시 관리자 패널 닫기
document.getElementById('adminPanel').addEventListener('click', function(e) {
    if (e.target === this) {
        closeAdminPanel();
    }
});
